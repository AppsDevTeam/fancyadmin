{*
 * @param Column[]        $columns            Available columns
 * @param Action[]        $actions            Available actions
 * @param Export[]        $exports            Available exports
 * @param Filter[]        $filters            Available filters
 * @param ToolBarButton[] $toolbarButons    Available toolbarButons
 * @param Form            $filter             Workaround for latte snippets
 * @param Row[]           $rows               List of rows (each contain a item from data source)
 * @param DataGrid        $control            Parent (DataGrid)
 * @param string          $originalTemplate  Original template file path
 * @param string          $iconPrefix        Icon prefix (fa fa-)
 * @param array           $columns_visibility What columns are visible
 * @param InlineEdit|null $inlineEdit  Inline editing data
 * @param InlineEdit|null $inlineAdd   Inline add data
 *}
{varType App\Components\Grids\Base\Datagrid $control}
{varType Ublaboo\DataGrid\Column\Action[] $actions}
{varType Ublaboo\DataGrid\Column\Column[] $columns}

<div class="datagrid datagrid-{$control->getName()} {implode(" ", $gridClasses)}" data-refresh-state="{link refreshState!}"
	{ifset $gridHtmlDataAttributes}{implode(" ", $gridHtmlDataAttributes)|noescape}{/ifset}
>
	{**
	 * Own data
	 *}
	<div n:snippet="grid">
	{snippetArea gridSnippets}
		{form filter, class => 'ajax', data-adt-submit-form => false}
			{**
			 * Filter form
			 *}
			{if $control->hasOuterFilterRendering()}
				{block outer-filters}
					{*
					<div class="row text-right datagrid-collapse-filters-button-row" n:if="$control->hasCollapsibleOuterFilters()">
						<div class="col-sm-12">
							<button class="btn btn-xs btn-primary active" type="button" data-toggle="collapse" data-target="#datagrid-{$control->getName()}-row-filters">
								<i n:block = "icon-filter" class="{$iconPrefix}filter"></i> {='ublaboo_datagrid.show_filter'|translate}
							</button>
						</div>
					</div>
					*}

					<div n:snippet="outer-filters" n:if="isset($filters['search']) || isset($filters['advancedSearch']) || $exports" class="main-search-filter">
						{var $form = $control['filter']}
						{ifset $filters['search']}
							{var $filter_block = 'filter-' . $filters['search']->getKey()}
							{var $filter_type_block = 'filtertype-' . $filters['search']->getType()}

							{ifset #$filter_block}
								{include #$filter_block, filter => $filters['search'], input => $form['filter'][$f->getKey()], outer => TRUE}
							{else}
								{ifset #$filter_type_block}
									{include #$filter_type_block, filter => $filters['search'], input => $form['filter'][$filters['search']->getKey()], outer => TRUE}
								{else}
									{include $filters['search']->getTemplate(), filter => $filters['search'], input => $form['filter'][$filters['search']->getKey()], outer => TRUE, required => TRUE}
								{/ifset}
							{/ifset}
						{/ifset}

						<div class="d-flex justify-content-end align-items-end">
							<div n:if="isset($filters['advancedSearch'])" data-adt-dashboard-filter>
								<div n:class="btn-group, dropdown-filter, ($selectedGridFilter || $temporaryGridFilter) ? selected">
									<a href="{plink editGridFilter! 'editId' => $selectedGridFilter['id'] ?? null, gridFilterClass => $gridClass, columns => $gridFilterColumns}" class="btn">
										<div class="dropdown-selected-name-wrapper">
											<i class="fa-solid fa-filter"></i>
											<span class="dropdown-selected-name">{$temporaryGridFilter ? 'Aktivní filtr' : ($selectedGridFilter ? $selectedGridFilter['name'] : '')}</span>{* TODO translate *}
										</div>
									</a>
									<a href="{plink editGridFilter! gridFilterClass => $gridClass, columns => $gridFilterColumns}" class="btn">
										<span>
											<i class="fa-solid fa-filter"></i>
										</span>
									</a>
									<a n:href="resetGridFilter!" class="btn disable-filter-button">
										<i class="fa-solid fa-xmark"></i>
									</a>

									<button type="button" class="btn dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
									</button>

									<ul class="dropdown-menu dropdown-menu-end">
										{foreach $gridFilters as $gridFilter}
											<li n:class="dropdown-item, $selectedGridFilter && $selectedGridFilter['id'] === $gridFilter->getId() ? 'selected'">
												<a n:href="this selectedGridFilter => $gridFilter->getId()">
													{$gridFilter->getName()}
													<div class="filter-item-actions">
                                                        <a class="btn-edit" href="{plink editGridFilter! 'editId' => $gridFilter->getId(), columns => $gridFilterColumns}">
                                                            <i class="fa-solid fa-pen"></i>
                                                        </a>
                                                        <a class="btn-edit" href="{plink removeGridFilter! 'removeId' => $gridFilter->getId(), columns => $gridFilterColumns}">
                                                            <i class="fa-solid fa-trash"></i>
                                                        </a>
                                                    </div>
												</a>

											</li>
										{/foreach}
										<li class="dropdown-item new-filter" id="add-button">
											<a href="{plink editGridFilter! gridFilterClass => $gridClass, columns => $gridFilterColumns}">
												<i class="fa-solid fa-plus"></i>
												Přidat nový filtr {* TODO překlady *}
											</a>
										</li>
									</ul>
								</div>
							</div>

							<span class="datagrid-exports" n:if="$exports" n:snippet="exports" n:block="exports">
							{foreach $exports as $export}
								{$export->setClass('btn noajax')->render()}
							{/foreach}
						</span>
						</div>
					</div>

					<div class="grid-filters-{$control->getParent()->getName()} collapse {if !isset($filters['search']) || $filter_active}show{/if}">
						{if $control->hasCollapsibleOuterFilters() && !$filter_active}
							{var $filter_row_class = 'row-filters'}
						{elseif $filter_active}
							{var $filter_row_class = 'row-filters in'}
						{else}
							{var $filter_row_class = 'row-filters'}
						{/if}
						<div class="{$filter_row_class} d-flex flex-wrap" id="datagrid-{$control->getName()}-row-filters">
							{if !isset($filters['advancedSearch'])}
								{var $i = 0}
								{var $filter_columns_class = 'col-sm-' . (12 / $control->getOuterFilterColumnsCount())}
								{foreach $filters as $filterName => $f}
									{continueIf $filterName === 'search'}
									{**
									 * Each fitler is rendered separately in its own template
									 *}
									{var $filter_block = 'filter-' . $f->getKey()}
									{var $filter_type_block = 'filtertype-' . $f->getType()}

									{ifset #$filter_block}
										{include #$filter_block, filter => $f, input => $form['filter'][$f->getKey()], outer => TRUE}
									{else}
										{ifset #$filter_type_block}
											{include #$filter_type_block, filter => $f, input => $form['filter'][$f->getKey()], outer => TRUE}
										{else}
											{include $f->getTemplate(), filter => $f, input => $form['filter'][$f->getKey()], outer => TRUE}
										{/ifset}
									{/ifset}
									{var $i = $i+1}
								{/foreach}
							{/if}

							{ifset $filters['advancedSearch']}
								<div class="d-none">
									{var $filter_block = 'filter-' . $filters['advancedSearch']->getKey()}
									{var $filter_type_block = 'filtertype-' . $filters['advancedSearch']->getType()}

									{ifset #$filter_block}
										{include #$filter_block, filter => $filters['advancedSearch'], input => $form['filter'][$f->getKey()], outer => TRUE}
									{else}
										{ifset #$filter_type_block}
											{include #$filter_type_block, filter => $filters['advancedSearch'], input => $form['filter'][$filters['advancedSearch']->getKey()], outer => TRUE}
										{else}
											{include $filters['advancedSearch']->getTemplate(), filter => $filters['advancedSearch'], input => $form['filter'][$filters['advancedSearch']->getKey()], outer => TRUE}
										{/ifset}
									{/ifset}
								</div>

								<div class="advanced-filter"></div>
							{/ifset}
						</div>
					</div>
				{/block}
			{/if}
			<div class="table-responsive-wrapper">
			<div class="table-responsive">
				<table class="{*{block table-class}table table-hover{/block}*}" n:snippet="table" n:block="data" style="overflow-wrap: anywhere;">
					<thead n:block="header">
						{ifset header_before}
							{include header_before}
						{/ifset}
						<tr n:block="header-column-row">
							<th n:snippet="thead-group-action" n:if="$hasGroupActions" n:attr="'rowspan=2' => !empty($filters) && !$control->hasOuterFilterRendering()" class="col-checkbox">
								<div class="form-check">
									<input n:if="$hasGroupActionOnRows" n:class="primary, form-check-input" name="{$control->getFullName()|lower}-toggle-all" type="checkbox" data-check="{$control->getFullName()}" data-check-all="{$control->getFullName()}" id='{$control->getFullName()|lower}-toggle-all'>
									<label class="form-check-label form-check-center" for="{$control->getFullName()|lower}-toggle-all"></label>
								</div>
							</th>
							{foreach $columns as $key => $column}
								{var $th = $column->getElementForRender('th', $key)}
								{$th->startTag()|noescape}
									{var $col_header = 'col-' . $key . '-header'}

									{**
									 * Column header can be defined also with block {col-<key>-header}
									 *}
									{ifset #$col_header}
										{include #$col_header, column => $column}
									{else}
										{if $column->isSortable()}
											<a n:class="$column->isSortedBy() ? 'sort' : '', 'ajax'" href="{link sort!, sort => $control->getSortNext($column)}" id="datagrid-sort-{$key}">
												{include #column-header, column => $column, key => $key}

												{if $column->isSortedBy()}
													{if $column->isSortAsc()}
														<i n:block="icon-sort-up" class="{$iconPrefix}caret-up"></i>
													{else}
														<i n:block="icon-sort-down" class="{$iconPrefix}caret-down"></i>
													{/if}
												{else}
													<i n:block="icon-sort" class="{$iconPrefix}sort"></i>
												{/if}
											</a>
										{else}
											{include #column-header, column => $column, key => $key}
										{/if}
									{/ifset}

									<div class="datagrid-column-header-additions">
										<div class="btn-group column-settings-menu" n:if="$control->canHideColumns()">
											<a class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
												<i n:block="icon-caret-down" class="{$iconPrefix}caret-down"></i>
											</a>
											<ul class="dropdown-menu dropdown-menu--grid">
												<li>
													<a n:href="hideColumn!, column => $key" class="ajax">
														<i n:block = "icon-eye-slash" class="{$iconPrefix}eye-slash"></i> {='ublaboo_datagrid.hide_column'|translate}</a>
												</li>
											</ul>
										</div>

										{*{if $control->hasColumnReset()}
											<a data-datagrid-reset-filter-by-column="{$key}" n:href="resetColumnFilter!, key => $key" n:class="isset($filters[$key]) && $filters[$key]->isValueSet() ? '' : 'd-none', 'ajax'" title="{='ublaboo_datagrid.reset_filter'|translate}">
												<i n:block="icon-remove" class="{$iconPrefix}remove"></i>
											</a>
										{/if}*}
									</div>
								{$th->endTag()|noescape}
							{/foreach}
							<th n:if="$actions || $control->isSortable() || $itemsDetail || $inlineEdit || $inlineAdd" class="col-action text-center">
								{*='ublaboo_datagrid.action'|translate*}
							</th>
						</tr>
						<tr n:block="header-filters" n:if="!empty($filters) && !$control->hasOuterFilterRendering()">
							{foreach $columns as $key => $column}
								{var $th = $column->getElementForRender('th', $key)}
								{$th->startTag()|noescape}
								{var $col_header = 'col-filter-' . $key . '-header'}
								{if !$control->hasOuterFilterRendering() && isset($filters[$key])}
									{var $i = $filter['filter'][$key]}

										{var $filter_block = 'filter-' . $filters[$key]->getKey()}
										{var $filter_type_block = 'filtertype-' . $filters[$key]->getType()}

									{ifset #$filter_block}
										{include #$filter_block, filter => $filters[$key], input => $i, outer => FALSE}
									{else}
										{ifset #$filter_type_block}
											{include #$filter_type_block, filter => $filters[$key], input => $i, outer => FALSE}
										{else}
											{include $filters[$key]->getTemplate(), filter => $filters[$key], input => $i, outer => FALSE}
										{/ifset}
									{/ifset}

								{/if}
								{$th->endTag()|noescape}
							{/foreach}
							<th n:if="$actions || $control->isSortable() || $itemsDetail || $inlineEdit || $inlineAdd" class="col-action text-center">
								{if !$control->hasAutoSubmit() && !$control->hasOuterFilterRendering()}
									{input $filter['filter']['submit']}
								{/if}
							</th>
						</tr>
						{ifset header_after}
							{include header_after}
						{/ifset}
						<tr>
							<th class="table-header-divider" colspan="{count($columns) + ($actions || $control->isSortable() || $itemsDetail || $inlineEdit || $inlineAdd ? 1 : 0)}">
								<div></div>
							</th>
						</tr>
					</thead>

					{block tbody}
					<tbody n:snippet="tbody" {if $control->isSortable()}data-sortable data-sortable-url="{link $control->getSortableHandler()}" data-sortable-parent-path="{$control->getSortableParentPath()}"{/}>
						{snippetArea items}
							{if $inlineAdd && $inlineAdd->isPositionTop()}
								{include inlineAddRow, columns => $columns}
							{/if}
							{foreach $rows as $row}

								{var $item = $row->getItem()}

								{if !isset($toggle_detail)}
									{if $inlineEdit && $inlineEdit->getItemId() == $row->getId()}
										{php $inlineEdit->onSetDefaults($filter['inline_edit'], $item)}

										<tr data-id="{$row->getId()}" n:snippet="item-{$row->getId()}" n:class="$row->getControlClass()">
											<td n:if="$hasGroupActions" class="col-checkbox"></td>

											{foreach $columns as $key => $column}
												{var $col = 'col-' . $key}

												{var $td = $column->getElementForRender('td', $key, $row)}
												{var $td->class[] = 'datagrid-inline-edit'}
												{$td->startTag()|noescape}
													{if isset($filter['inline_edit'][$key])}
														{if $filter['inline_edit'][$key] instanceof \Nette\Forms\Container}
															{foreach $filter['inline_edit'][$key]->getControls() as $inlineEditControl}
																{input $inlineEditControl}
															{/foreach}
														{else}
															{input $filter['inline_edit'][$key]}
														{/if}
													{elseif $inlineEdit->showNonEditingColumns()}
														{include column-value, column => $column, row => $row, key => $key}
													{/if}
												{$td->endTag()|noescape}
											{/foreach}

											<td class="col-action col-action-inline-edit">
												{input $filter['inline_edit']['cancel'], class => 'btn btn-xs btn-danger'}
												{input $filter['inline_edit']['submit'], class => 'btn btn-xs btn-primary'}
												{input $filter['inline_edit']['_id']}
												{input $filter['inline_edit']['_primary_where_column']}
											</td>
										</tr>
									{else}
										<tr data-id="{$row->getId()}" n:snippet="item-{$row->getId()}" n:class="$row->getControlClass()">
											<td n:if="$hasGroupActions" class="col-checkbox">
												{if $row->hasGroupAction()}
													<div class="form-check">
														<input type="checkbox" class="form-check-input" data-check="{$control->getFullName()}" data-check-all-{$control->getFullName()|noescape} name="{$control->getFullName()|lower}_group_action_item[{$row->getId()}]" id="{$control->getFullName()|lower}_group_action_item-{$row->getId()}">
														<label class="form-check-label form-check-center" for="{$control->getFullName()|lower}_group_action_item-{$row->getId()}"></label>
													</div>
												{/if}
											</td>
											{foreach $columns as $key => $column}
												{php $column = $row->applyColumnCallback($key, clone $column)}

												{var $td = $column->getElementForRender('td', $key, $row)}
												{$td->startTag()|noescape}
												    <div>
												        {include column-value, column => $column, row => $row, key => $key}
                                                    </div>
												{$td->endTag()|noescape}
											{/foreach}
											<td n:if="$actions || $control->isSortable() || $itemsDetail || $inlineEdit || $inlineAdd" class="col-action dropdown">
												<div>
													{if $itemsDetail && $itemsDetail->shouldBeRendered($row)}
														{$itemsDetail->renderButton($row)|noescape}
													{/if}
													{php $actionButtonRendered = false}
													{foreach array_filter($actions, fn($action) => in_array($action->getClass($row), \App\UI\Portal\Components\Grids\Base\DataGrid::ACTION_NOT_DROPDOWN_ITEM, true)) as $key => $action}
														{if $row->hasAction($key)}
															{include action}
														{/if}
													{/foreach}
													{var $dropdownActions = array_filter($actions, fn($action) => !in_array($action->getClass($row), \App\UI\Portal\Components\Grids\Base\DataGrid::ACTION_NOT_DROPDOWN_ITEM, true) && $row->hasAction($key))}
													{dump array_keys($dropdownActions)}
													{foreach $dropdownActions as $key => $action}
                                                        {if !$actionButtonRendered}
                                                            <button type="button" class="btn btn-sm" data-action="{$key}" data-bs-toggle="dropdown">
                                                                <i class="fa fa-ellipsis-h"></i>
                                                            </button>
                                                            <div class="dropdown-menu dropdown-menu-right">

                                                            {php $actionButtonRendered = true}
                                                        {/if}

                                                        {include action}
                                                        {if $actionButtonRendered && $iterator->isLast()}
                                                            </div>
                                                        {/if}
													{/foreach}
													<span class="handle-sort btn btn-xs btn-default" n:if="$control->isSortable()">
														<i n:block = "icon-arrows-v" class="{$iconPrefix}arrows-v"></i>
													</span>
													{if $inlineEdit && $row->hasInlineEdit()}
														{$inlineEdit->renderButton($row)|noescape}
													{/if}
												</div>
											</td>
										</tr>
									{/if}
								{/if}

								{**
								 * Item detail
								 *}
								{if $itemsDetail}
									<tr class="row-item-detail item-detail-{$row->getId()}" n:snippet="item-{$row->getId()}-detail">
										{if true}
											{var $item_detail_params = ['item' => $item, '_form' => $filter] + $itemsDetail->getTemplateVariables()}

											{if isset($filter['itemsDetail_form'])}
												{var $item_detail_params['itemsDetail_form'] = $filter['itemsDetail_form']}
											{/if}

											{ifset #detail}
												<td colspan="{$control->getColumnsCount()}">
													<div class="item-detail-content">
														{include #detail, (expand) $item_detail_params}
													</div>
												</td>
											{elseif $itemsDetail}
												<td colspan="{$control->getColumnsCount()}">
													<div class="item-detail-content">
														{if $itemsDetail->getType() == 'template'}
															{include $itemsDetail->getTemplate(), (expand) $item_detail_params}
														{else}
															{$itemsDetail->render($item)|noescape}
														{/if}
													</div>
												</td>
											{/ifset}
										{/if}
									</tr>
									<tr class="row-item-detail-helper"></tr>
								{/if}
							{/foreach}

							{if $inlineAdd && $inlineAdd->isPositionBottom()}
								{include inlineAddRow, columns => $columns}
							{/if}

							<tr class="datagrid-row-columns-summary" n:if="!empty($rows) && ($columnsSummary || $control->hasSomeAggregationFunction())" n:snippet="summary">
								<td n:if="$hasGroupActions" class="col-checkbox"></td>

								{if $columnsSummary && $columnsSummary->someColumnsExist($columns)}
									{include columnsSummary, columns => $columns}
								{/if}

								{if $control->hasSomeAggregationFunction()}
									{include aggregationFunctions, columns => $columns}
								{/if}

								<td n:if="$actions || $control->isSortable() || $itemsDetail || $inlineEdit || $inlineAdd" class="col-action"></td>
							</tr>

							{block noItems}
								<tr n:if="!$rows">
									<td colspan="{$control->getColumnsCount()}">
										{if $filter_active}
											{='ublaboo_datagrid.no_item_found_reset'|translate} <a class="link ajax" n:href="resetFilter!">{='ublaboo_datagrid.here'|translate}</a>.
										{else}
											{ifset $customNoItemFoundMessage}
												{$customNoItemFoundMessage|noescape}
											{else}
												{='ublaboo_datagrid.no_item_found'|translate}
											{/ifset}
										{/if}
									</td>
								</tr>
							{/block}
						{/snippetArea}
					</tbody>
					{/block}
				</table>
			</div>
                <div class="table-bottom-scroll">
                        <div class="table-bottom-scroll-inner"></div>
                </div>
			</div>
			{block tfoot}
				{if	$showTableFoot && $control->isPaginated()}
					<div n:snippet="pagination">
						{if $control->isPaginated() || $filter_active}
							<div n:block="pagination">
								<div n:if="!$control->isTreeView()" class="row-grid-bottom">
									{*<div class="col-items">
										<span class="text-muted" n:if="$control->isPaginated()">
											{var $paginator = $control['paginator']->getPaginator()}

											{if $control->getPerPage() === 'all'}
												{='ublaboo_datagrid.items'|translate}: {='ublaboo_datagrid.all'|translate}
											{else}
												{='ublaboo_datagrid.items'|translate}: {$paginator->getOffset() > 0 ? $paginator->getOffset() + 1 : ($paginator->getItemCount() > 0 ? 1 : 0)} - {sizeof($rows) + $paginator->getOffset()}
												{='ublaboo_datagrid.from'|translate} {$paginator->getItemCount()}
											{/if}
										</span>
									</div>*}
									<div class="col-pagination text-center">
										{**
										* Pagination
										*}
										{control paginator}
									</div>
									<div class="col-per-page text-right d-none">
										<a n:href="resetFilter!" n:class="ajax, btn-sm, reset-filter, !$filter_active ? 'd-none' : ''"><i class="fa fa-filter mr-1"></i>{_common.resetFilter}</a>

										<span class="text-muted mr-2">{='ublaboo_datagrid.items_onPage'|translate}</span>
										{if $control->isPaginated()}
											{input $filter['perPage'], data-autosubmit-per-page => TRUE, class => 'form-control form-control-sm', data-minimum-results-for-search => -1, data-adt-select2 => true}
											{input $filter['perPage_submit'], class => 'datagrid-per-page-submit'}
										{/if}
									</div>
								</div>
							</div>
						{/if}
					</div>
				{else}
					{*<div class="row-grid-bottom"></div>*}
				{/if}
			{/block}
		{/form}
	{/snippetArea}
	</div>
</div>

{define action}
	{if $action->hasTemplate()}
		{include $action->getTemplate(), item => $item, (expand) $action->getTemplateVariables(), row => $row}
	{else}
		{$action->render($row)|noescape}
	{/if}
{/define}

{define inlineAddRow}
	{php $inlineAdd->onSetDefaults($filter['inline_add'])}

	<tr class="datagrid-row-inline-add datagrid-row-inline-add-hidden">
		<td n:if="$hasGroupActions" class="col-checkbox"></td>

		{foreach $columns as $key => $column}
			{var $col = 'col-' . $key}

			{var $td = clone $column->getElementForRender('td', $key)}
			{var $td->class[] = 'datagrid-inline-edit'}
			{$td->startTag()|noescape}
				{if isset($filter['inline_add'][$key])}
					{if $filter['inline_add'][$key] instanceof \Nette\Forms\Container}
						{foreach $filter['inline_add'][$key]->getControls() as $inlineAddControl}
							{input $inlineAddControl}
						{/foreach}
					{else}
						{input $filter['inline_add'][$key]}
					{/if}
				{/if}
			{$td->endTag()|noescape}
		{/foreach}

		<td class="col-action col-action-inline-edit">
			{input $filter['inline_add']['cancel']}
			{input $filter['inline_add']['submit']}
		</td>
	</tr>
{/define}


{define columnsSummary}

	{foreach $columns as $key => $column}
		{var $td = $column->getElementForRender('td', $key)}

		{$td->startTag()|noescape}
			{$columnsSummary->render($key)}
		{$td->endTag()|noescape}
	{/foreach}

{/define}


{define aggregationFunctions}

	{foreach $columns as $key => $column}
		{var $td = $column->getElementForRender('td', $key)}

		{$td->startTag()|noescape}
			{if $aggregation_functions}
				{ifset $aggregation_functions[$key]}
					{$aggregation_functions[$key]->renderResult()|noescape}
				{/ifset}
			{else}
				{$multiple_aggregation_function->renderResult($key)|noescape}
			{/if}
		{$td->endTag()|noescape}
	{/foreach}

{/define}


{define column-header}
	{var $col = 'header-' . $key}

	{if $column->isHeaderEscaped()}
		{ifset #$col}
			{include #$col, column => $column}
		{else}
			{if $column instanceof \Nette\Utils\Html || !$column->isTranslatableHeader()}
				{$column->getName()|noescape}
			{else}
				{$column->getName()|translate|noescape}
			{/if}
		{/ifset}
	{else}
		{ifset #$col}
			{include #$col, column => $column}
		{else}
			{if $column instanceof \Nette\Utils\Html || !$column->isTranslatableHeader()}
				{$column->getName()}
			{else}
				{$column->getName()|translate}
			{/if}
		{/ifset}
	{/if}
{/define}


{define column-value}
	{var $col = 'col-' . $key}
	{var $item = $row->getItem()}

	{if $column->hasTemplate()}
		{include $column->getTemplate(), row => $row, item => $item, (expand) $column->getTemplateVariables()}
	{else}
		{ifset #$col}
			{include #$col, item => $item}
		{else}
			{if $column->isTemplateEscaped()}
				{$column->render($row)}
			{else}
				{$column->render($row)|noescape}
			{/if}
		{/ifset}
	{/if}
{/define}

{include gridScript}

{define gridScript}
	<script>
		function toggleClass(input) {

			if (input === undefined) {
				return;
			}

			const className = 'sent';

			if (input.value) {
				$(input).addClass(className)
			}
			else {
				$(input).removeClass(className);
			}
		}

		document.addEventListener("DOMContentLoaded", () => {
			const inputSelector = '.form-group-filter input:not([name*="advanced"])';

			toggleClass($(inputSelector)[0]);
			$(inputSelector).change((e) => {
				toggleClass(e.currentTarget);
			});
		});
	</script>
{/define}